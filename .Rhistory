?randomForest
#Normal bagging
bagging=randomForest(Sales~.,data=train,mtry=10)
predbag=predict(rforest,newdata=test)
library(randomForest)
#Normal bagging
rforest=randomForest(Sales~.,data=train,mtry=10)
predbag=predict(rforest,newdata=test)
# Using the carseats data
n=nrow(Carseats)
ind=sample(1:n,size=floor(n/2))
train=Carseats[ind,]
test=Carseats[-ind,]
#Normal bagging
rforest=randomForest(Sales~.,data=train,mtry=10)
predbag=predict(rforest,newdata=test)
msebag=mean((test$Sales-predrf)^2)
#Random forest
rforest=randomForest(Sales~.,data=train,mtry=3)
msebag=mean((test$Sales-predbag)^2)
#Random forest
rforest=randomForest(Sales~.,data=train,mtry=3)
predrf=predict(rforest,newdata=test)
mserf=mean((test$Sales-predrf)^2)
msebag
mserf
varImpPlot(bagging)
#Normal bagging
bagging=randomForest(Sales~.,data=train,mtry=10)
varImpPlot(bagging)
?varImpPlot
install.packages('gbm')
# boosting
boost=gbm(formula1,data=Hitters[itrain,],distribution
="gaussian",n.trees=1000,interaction.depth=4,
shrinkage=0.01)
library(gbm)
# boosting
boost=gbm(formula1,data=Hitters[itrain,],distribution
="gaussian",n.trees=1000,interaction.depth=4,
shrinkage=0.01)
# creating data
Hitters=Hitters[!is.na(Hitters$Salary),]
Hitters$logSalary=log(Hitters$Salary)
n=nrow(Hitters)
itrain=sample(1:n,size=floor(n/2))
traindata=Hitters[itrain,]
testdata=Hitters[-itrain,]
ytest=testdata$logSalary
formula1=logSalary~CRuns+CHits+HmRun+CWalks+CRBI+Hits+RBI
# boosting
boost=gbm(formula1,data=Hitters[itrain,],distribution
="gaussian",n.trees=1000,interaction.depth=4,
shrinkage=0.01)
predgbm=predict(boost,newdata=Hitters[-itrain,],n.trees=1000)
msegbm=mean((ytest-predgbm)^2)
msegbm
formula1=logSalary~CRuns+CHits+HmRun+CWalks+CRBI+Hits+RBI
treesimple=tree(formula1,data=traindata)
pred1=predict(treesimple,newdata=testdata)
pred1
plot(pred1)
library(tidyverse)
warnings()
library(tidyverse)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.10.tar.gz", repos = NULL, type="source")
library(tidyverse)
library(rlang)
library(nycflights13)
library(nycflights13)
updateR()
library(tidyverse)
library(rlang)
install.packages("rlang")
library(tidyverse)
.libPaths()
remove.packages("rlang")
install.packages("devtools")
library(rlang)
library(tidymodels)
library(tidyverse)
library(rlang)
install.packages("rlang")
library(rlang)
library(tidyverse)
setwd("~/GitHub/git-simenstolsnes")
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- read.delim("suites_dw_Table1.txt", sep = "|", skip = 11)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- read.delim("suites_dw_Table1.txt", sep = "|")
View(galaxy)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines("suites_dw_Table1.txt")
?readLines
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "suites_dw_Table1.txt")
galaxy
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "suites_dw_Table1.txt", n = -1)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "suites_dw_Table1.txt")
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt",
n = 800)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt",
n = -800)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt",
n = 800)
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
galaxy
"---" %in% galaxy
for (i in 1:length(galaxy)){
if ("---" %in% galaxy[i]){
L = i
}
break()
}
"---" %in% galaxy[1]
"---" %in% galaxy[14]
any("---" == galaxy)
startsWith(galaxy, "----")
any(startsWith(galaxy, "----"))
which(startsWith(galaxy, "----"))
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- which(startsWith(galaxy, "----"))
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
galaxy[1:L-2]
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
galaxy[1:14]
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
galaxy[1:(L-2)]
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
cat(galaxy[1:(L-2)])
library(magrittr)
cat(galaxy[1:(L-2)])
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
write.table(cat(galaxy[1:(L-2)]), file = "description.txt", sep = ";")
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
write.table(cat(galaxy[1:(L-2)]), file = "description.txt", sep = ";")
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
description <- cat(galaxy[1:(L-2)])
write.table(description, file = "description.txt", sep = ";")
description
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
galaxy <- readLines(con = "https://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- which(startsWith(galaxy, "----"))
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
description <- cat(galaxy[1:(L-2)])
?cat
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
cat(galaxy[1:(L-2)], file = "description.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- which(startsWith(galaxy, "----"))
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
cat(galaxy[1:(L-2)], file = "description.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- galaxy[(L-1)]
library(stringr)
?str_split
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_split(galaxy[(L-1)], pattern = "|")
View(variable_names)
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_split(galaxy[(L-1)])
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- galaxy[(L-1)]
variable_names
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- strsplit(variable_names, "|")
View(variable_names)
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split(variable_names, "|")
variable_names <- str_split_1(variable_names, "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split_1(variable_names, "|")
variable_names <- str_split_1(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split_1(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split_1(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
str_split(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- str_split(variable_names, pattern = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- strsplit(variable_names, split = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names
strsplit(variable_names, split = "|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
?strsplit
variable_names <- unlist(strsplit(variable_names, split = "|"))
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "|"))
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "n"))
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "|"))
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "\\|"))
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
cat(variable_names, file = "variable_names.csv")
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
cat(variable_names, file = "variable_names.csv", sep = ";")
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)]
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %$%
str_replace_all(., " ", "")
galaxy[(L+1):length(galaxy)]
galaxy[(L+1):length(galaxy)] %$%
str_replace_all(., " ",)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %$%
str_replace_all(., " ", "")
str_replace_all(galaxy[(L+1):length(galaxy)], " ", "")
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- strsplit(variable_names, "\\|")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- str_replace_all(galaxy[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "\\|"))
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
unlist(strsplit(., "\\|"))
comma_seperated_values
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "")
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
tibble(unlist(strsplit(., "\\|")))
library(tidyverse)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
tibble(unlist(strsplit(., "\\|")))
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
strsplit(., "\\|")
View(comma_seperated_values)
View(comma_seperated_values)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
str_replace_all(., "\\|", ",")
?collapse
collapse(variable_names
collapse(variable_names)
collapse(variable_names)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_seperated_values <-
galaxy[(L+1):length(galaxy)] %>%
str_replace_all(., " ", "") %>%
str_replace_all(., "\\|", ",")
cat(c(paste(variable_names, collapse = ","), comma_seperated_values),
file = "galaxies.csv")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
cat(c(paste(variable_names, comma_seperated_values, collapse = ",")),
file = "galaxies.csv")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
c(paste(variable_names, comma_seperated_values, collapse = ","))
galaxy[(L+1):length(galaxy)]
comma_seperated_values[1]
(paste(variable_names, comma_seperated_values, collapse = ";"))
?read_csv2
a <- c(paste(variable_names, comma_seperated_values, collapse = ";"))
a <- c(variable_names)
a <- c(variable_names, comma_seperated_values)
a
cat(a,
file = "galaxies.csv")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
a <- c(variable_names, comma_seperated_values)
cat(a, file = "galaxies.csv", sep = ",")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
cat(comma_seperated_values, file = "galaxies.csv", sep = ",")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
comma_seperated_values
cat(comma_seperated_values, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
a <- c(variable_names, comma_seperated_values)
cat(a, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
a <- c(paste(variable_names, collapse = ","), comma_seperated_values)
cat(a, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
read.csv("galaxies.csv")
# Read the finished .csv back into R in the normal way.
galaxies_new <- read.csv("galaxies.csv")
View(galaxies_new)
# problem 3
# visualizing size vs distance
galaxies_new %>%
ggplot(aes(x = D, y = log_lk)) +
geom_point()
# problem 3
# visualizing size vs distance
galaxies_new %>%
ggplot(aes(x = D, y = log_lk)) +
geom_point() +
geom_smooth(aes(x = D, y = log_lk))
with_number_bodies <-
galaxies %>%
group_by(md) %>%
summarise(number_of_bodies = n()) %>%
rename(name = md) %>%
full_join(galaxies) %>%
mutate(local_group = recode(.$name,
MilkyWay = "Milky Way",
MESSIER031 = "Andromeda",
MESSIER033 = "Triangulum",
.default = "Other"))
with_number_bodies <-
galaxies_new %>%
group_by(md) %>%
summarise(number_of_bodies = n()) %>%
rename(name = md) %>%
full_join(galaxies_new) %>%
mutate(local_group = recode(.$name,
MilkyWay = "Milky Way",
MESSIER031 = "Andromeda",
MESSIER033 = "Triangulum",
.default = "Other"))
# It is a bit irritating that we are missing the diameter of the Milky Way.
# Googling, again, suggests that this is a known number, approximately 30kpc
# (100000 light years). Let us fill that in so we can include this variable in
# the following:
with_number_bodies[with_number_bodies$name == "MilkyWay", "a_26"] <- 30
# We can then plot the number of bodies that each has under its main influence,
# plot it against its distance from us, color the dots so that we can identlify
# the three main galaxies in the local group, and also let the size of the dots
# represent the diameter of the objects.
with_number_bodies %>%
ggplot(aes(x = D, y = number_of_bodies, colour = local_group, size = a_26)) +
geom_point() +
xlab("Distance from us (Mpc)") +
ylab("Number of bodies under its main influence") +
labs(colour = "Galaxy", size = "Diameter (kpc)") +
theme_minimal()
View(galaxies_new)
# problem 4
hubble <- readLines("https://www.sao.ru/lv/lvgdb/article/UCNG_Table4.txt")
# use same techique to locate L
L <- which(startsWith(hubble, "----"))
# extract variable names
variable_names <- str_replace_all(hubble[(L-1)], " ", "")
variable_names <- unlist(strsplit(variable_names, "\\|"))
# aand finalize the data
comma_seperated_values <-
galaxy[(L+1):length(hubble)] %>%
str_replace_all(., " ", "") %>%
str_replace_all(., "\\|", ",")
# adding column names
comma_seperated_values_with_names <- c(paste(variable_names, collapse = ","),
comma_seperated_values)
tibble(comma_seperated_values_with_names)
# aand finalize the data
comma_seperated_values <-
galaxy[(L+1):length(hubble)] %>%
str_replace_all(., " ", "") %>%
str_replace_all(., "\\|", ",")
comma_seperated_values
# aand finalize the data
comma_seperated_values <-
hubble[(L+1):length(hubble)] %>%
str_replace_all(., " ", "") %>%
str_replace_all(., "\\|", ",")
# adding column names
comma_seperated_values_with_names <- c(paste(variable_names, collapse = ","),
comma_seperated_values)
tibble(comma_seperated_values_with_names)
cat(comma_seperated_values_with_names, file = "hubble.csv" sep = ",")
cat(comma_seperated_values_with_names, file = "hubble.csv", sep = ",")
# read the file
hubble <- read.csv("hubble.csv")
View(hubble)
# save the file
cat(comma_seperated_values_with_names, file = "hubble.csv", sep = "\n")
# read the file
hubble <- read.csv("hubble.csv")
View(hubble)
# read the file
hubble <- read.csv("hubble.csv") %>%
select(name, cz)
# combine the dfs
combined <- galaxies_new %>%
left_join(hubble, by = "name")
View(combined)
# plot
combined %>%
ggplot(aes(x = D, y = cz)) +
geom_point()
# plot
combined %>%
ggplot(aes(x = D, y = cz)) +
geom_point() +
geom_smooth()
# can estimate the constant with linear regression without intercept
lm(cz ~ D - 1, data = combines) %>% summary
# can estimate the constant with linear regression without intercept
lm(cz ~ D - 1, data = combined) %>% summary
?which
